import numpy as np
import matplotlib.pyplot as plt
from sr_export_PES import *

def normalize_pts(pts, minSize, maxSize):
    pts = np.array(pts)

    new_pts = []
    i = 0
    best_size = (maxSize + minSize)/2.0

    while i < pts.shape[0]-1:
        point1 = pts[i]
        point2 = pts[i + 1]

        x1, y1 = pts[i]
        x2, y2 = pts[i + 1]
        dist = np.sqrt((y2 - y1) ** 2 + (x2 - x1) ** 2)
        vector = [(x2 - x1),(y2 - y1)]
        #catch divide by zero...
        if dist < 0.001:
            dist = 0.001
        unit_vector = [vector[0] / dist, vector[1] / dist]
        print point1, point2, dist
        #create intermediary points if dist > maxsize
        if dist >= maxSize:
            count = int(dist/best_size) +1
            # not needed because j=0 ----- new_pts.append(point1)
            for j in range(count):
                temp_pt = [x1 + (best_size * j * unit_vector[0]), y1 + (j* best_size * unit_vector[1])]
                print 'new pt"', temp_pt
                new_pts.append(temp_pt)
            new_pts.append(point2)
        #skip over really close points
        elif dist <= minSize :
            new_pts.append(point1)
            print 'point skipped', point2
            nextPoint = 2
            while dist < minSize:
                try:
                    point2 = pts[i + nextPoint]
                except:
                    break
                x2, y2 = pts[i + nextPoint]
                dist = np.sqrt((y2 - y1) ** 2 + (x2 - x1) ** 2)
                vector = [(x2 - x1), (y2 - y1)]
                if dist < 0.001:
                    dist = 0.001
                unit_vector = [vector[0] / dist, vector[1] / dist]
                dist = np.sqrt((y2 - y1) ** 2 + (x2 - x1) ** 2)
                print 'trying', point2, dist
                nextPoint = nextPoint + 1
            # create intermediary points if dist > maxsize
            if dist >= maxSize:
                count = int(dist / best_size) +1
                # not needed because j=0 ----- new_pts.append(point1)
                for j in range(count):
                    temp_pt = [x1 + (best_size * j * unit_vector[0]), y1 + (j * best_size * unit_vector[1])]
                    print 'new pt"', temp_pt
                    new_pts.append(temp_pt)
                new_pts.append(point2)
            else:
                print 'using', point2, dist
                new_pts.append(point2)
            i = i + nextPoint - 1
        #otherwise points are good
        else:
            new_pts.append(point1)
            new_pts.append(point2)
        i = i+2

    return np.array(new_pts)


thread_offset = 5.0800000757
r1_ink = [63.500000000253991, -170.54285593401548]
r2_ink = [63.500000000253991, -221.34285593421868]
r1_emb = [0.0, 25.399999999999999]
r2_emb = [0.0, -25.399999999999999]
pts = [(50.800000000203198, -182.69999866739747), (50.800000000203198, -182.69999866739747), (50.800000000203198, -182.69999866739747), (88.90000000035559, -195.39999866744824), (88.90000000035559, -195.39999866744824), (88.90000000035559, -195.39999866744824), (50.800000000203198, -208.09999866749905), (50.800000000203198, -208.09999866749905), (50.800000000203198, -208.09999866749905)]
new_pts = [(-12.699999999999992, 13.242857266666626), (-12.699999999999992, 13.242857266666626), (-11.118861169915803, 17.986273756919196), (-13.095284707521039, 8.1041560688930101), (-8.7471529247895212, 17.195704341877104), (-10.72357646239475, 7.3135866538509138), (-6.3754446796632331, 16.405134926835007), (-8.3518682172684695, 6.523017238808821), (-4.0037364345369522, 15.614565511792915), (-5.9801599721421805, 5.7324478237667265), (-1.6320281894106636, 14.82399609675082), (-3.6084517270158982, 4.9418784087246355), (0.7396800557156229, 14.033426681708725), (-1.2367434818896148, 4.1513089936825391), (3.1113883008419023, 13.242857266666633), (1.1349647632366739, 3.3607395786404446), (5.4830965459681895, 12.45228785162454), (3.506673008362958, 2.5701701635983527), (7.8548047910944749, 11.661718436582445), (5.878381253489243, 1.7796007485562582), (10.22651303622076, 10.871149021540351), (8.2500894986155284, 0.98903133351416539), (12.598221281347046, 10.080579606498258), (10.621797743741814, 0.19846191847207084), (14.969929526473335, 9.2900101914561635), (12.993505988868094, -0.59210749657002193), (17.341637771599611, 8.4994407764140707), (15.365214233994383, -1.3826769116121174), (19.7133460167259, 7.7088713613719761), (17.736922479120665, -2.1732463266542092), (22.085054261852182, 6.9183019463298834), (20.108630724246954, -2.9638157416963047), (24.456762506978471, 6.1277325312877888), (22.480338969373236, -3.7543851567383966), (26.828470752104796, 5.3371631162456818), (23.742527130926057, -4.1751145439226711), (25.399999999999999, 0.5428572666666468), (25.399999999999999, 0.5428572666666468), (26.981138830084188, -4.2005592235859224), (22.633007047352667, 4.8909890493981685), (24.609430584957906, -4.9911286386280178), (20.261298802226378, 4.100419634356073), (22.23772233983162, -5.7816980536701124), (17.889590557100099, 3.309850219313978), (19.866014094705335, -6.5722674687122078), (15.517882311973812, 2.5192808042718831), (17.494305849579053, -7.3628368837543032), (13.14617406684753, 1.7287113892297876), (15.122597604452768, -8.1534062987963978), (10.774465821721247, 0.93814197418769218), (12.750889359326486, -8.9439757138384923), (8.4027575765949596, 0.14757255914559675), (10.3791811142002, -9.7345451288805886), (6.0310493314686795, -0.6429968558964978), (8.0074728690739168, -10.525114543922683), (3.6593410863423927, -1.4335662709385932), (5.6357646239476331, -11.315683958964778), (1.2876328412161073, -2.2241356859806887), (3.2640563788213472, -12.106253374006874), (-1.0840754039101728, -3.0147051010227832), (0.89234813369506183, -12.896822789048969), (-3.4557836490364582, -3.8052745160648787), (-1.4793601114312214, -13.687392204091063), (-5.827491894162744, -4.5958439311069714), (-3.8510683565575006, -14.477961619133156), (-8.1992001392890295, -5.3864133461490695), (-6.2227766016837869, -15.268531034175254), (-10.570908384415308, -6.1769827611911641), (-8.5944848468100723, -16.059100449217347), (-12.942616629541593, -6.9675521762332568), (-10.966193091936274, -16.849669864259415), (-14.204804791094542, -7.3882815634175758), (-12.699999999999992, -12.157142733333359), (-12.699999999999992, -12.157142733333359), (-12.699999999999992, -12.157142733333359), (-12.699999999999992, -12.157142733333359)]
# saved to: c:\pesfolder\inkscape.pes




r1_ink = np.array(r1_ink)
r2_ink = np.array(r2_ink)
r1_emb = np.array(r1_emb)
r2_emb = np.array(r2_emb)
pts = np.array(pts)
new_pts = np.array(new_pts)

# #plot the origianl points
# x,y = pts.T
# plt.plot(x, y, 'r-')
# #plot the inkscape registration points
# x,y = r1_ink
# plt.plot(x, y, 'ro')
# x,y = r2_ink
# plt.plot(x, y, 'r^')

#plot the embroidery registration points
x,y =np.array(r1_emb)
plt.plot(x, y, 'mo')
x,y = np.array(r2_emb)
plt.plot(x, y, 'm^')

x,y = new_pts.T
plt.plot(x, y, '.' )
print new_pts.shape

# new_pts2 = normalize_pts(new_pts, 10,14)
#
#
# x,y = new_pts2.T
# plt.plot(x, y, 'r.' )
# print new_pts2.shape

plt.show()

result = make_pes('c:\\pesfolder\\', 'test5.pes', new_pts, True)







